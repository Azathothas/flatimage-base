#Proprietary GPU Drivers Ubuntu: https://github.com/NatoBoram/FirstRun/blob/main/Linux/Ubuntu.sh
https://launchpad.net/~graphics-drivers/+archive/ubuntu/ppa
sudo add-apt-repository -y ppa:graphics-drivers/ppa



#Cachyos V4
https://github.com/CachyOS/linux-cachyos?tab=readme-ov-file#how-to-add-cachyos-repositories

The docker image can't be built in due to qemu itself, so I have to probably build it locally if I want to add a v4 cachyos....
https://github.com/CachyOS/docker/pull/4

#ppsspp on Arch/CachyOS
pushd "$($TMPDIRS)" >/dev/null 2>&1
       OWD="$(realpath .)" && export OWD="${OWD}"
       export APP="ppsspp"
       export PKG_NAME="${APP}.FlatImage"

rsync -achLv "/opt/FLATIMAGE/cachyos" "${OWD}/cachyos"
       export FIMG_BASE="${OWD}/cachyos"
#Bootstrap
"${FIMG_BASE}" fim-perms add "audio,dbus_user,dbus_system,gpu,home,input,media,network,udev,usb,xorg,wayland"
"${FIMG_BASE}" fim-perms list
"${FIMG_BASE}" fim-root bash -c '
 #Sync
 pacman -Syu --noconfirm
 #Install Deps
 packages=""
 for pkg in $packages; do pacman -Sy "$pkg" --needed --noconfirm ; done
 #Install
 pacman ppsspp -Sy --noconfirm
 pacman -Ql ppsspp
 #Cleanup
 pacman -Rsn base-devel --noconfirm
 pacman -Rsn perl --noconfirm
 pacman -Rsn python --noconfirm
 pacman -Scc --noconfirm
'
#ENV
"${FIMG_BASE}" fim-exec mkdir -p "/home/root"
"${FIMG_BASE}" fim-env add 'USER=root' 'HOME=/home/root' 'XDG_CONFIG_HOME=/home/root/.config' 'XDG_DATA_HOME=/home/root/.local/share'
"${FIMG_BASE}" fim-env list
"${FIMG_BASE}" fim-boot "/usr/bin/PPSSPPQt"
#Create
"${FIMG_BASE}" fim-commit


##ppsspp on Void
pushd "$($TMPDIRS)" >/dev/null 2>&1
       OWD="$(realpath .)" && export OWD="${OWD}"
       export APP="ppsspp"
       export PKG_NAME="${APP}.FlatImage"

rsync -achLv "/opt/FLATIMAGE/void-glibc" "${OWD}/void-glibc"
       export FIMG_BASE="${OWD}/void-glibc"
#ppsspp on VOid
#Bootstrap
"${FIMG_BASE}" fim-perms add "audio,dbus_user,dbus_system,gpu,home,input,media,network,udev,usb,xorg,wayland"
"${FIMG_BASE}" fim-perms list
"${FIMG_BASE}" fim-root bash -c '
 #Enable Repos
 xbps-install void-repo-multilib void-repo-multilib-nonfree void-repo-nonfree --sync --update --yes
 #Install Deps
 packages=""
 for pkg in $packages; do xbps-install "$pkg" --sync --update --yes ; done
 #Finally Install ppsspp
 xbps-install ppsspp --sync --update --yes
 xbps-query -f ppsspp
 xbps-remove --clean-cache --remove-orphans --recursive --verbose
'
#ENV
"${FIMG_BASE}" fim-exec mkdir -p "/home/root"
"${FIMG_BASE}" fim-env add 'USER=root' 'HOME=/home/root' 'XDG_CONFIG_HOME=/home/root/.config' 'XDG_DATA_HOME=/home/root/.local/share'
"${FIMG_BASE}" fim-env list
"${FIMG_BASE}" fim-boot "/usr/bin/ppsspp-headless"
#Create
"${FIMG_BASE}" fim-commit

#Steam on VOid
#Bootstrap
"${FIMG_BASE}" fim-perms add "audio,dbus_user,dbus_system,gpu,home,input,media,network,udev,usb,xorg,wayland"
"${FIMG_BASE}" fim-perms list
"${FIMG_BASE}" fim-root bash -c '
 #Enable Repos
 xbps-install void-repo-multilib void-repo-multilib-nonfree void-repo-nonfree --sync --update --yes
 #Install Deps
 packages="alsa-utils alsa-lib alsa-plugins-pulseaudio alsa-ucm-conf bash binutils curl fakeroot git glibc-32bit intel-media-driver intel-video-accel libcurl libcurl-32bit libdrm-32bit libgcc-32bit libglvnd-32bit libjack-pipewire libpipewire libpulseaudio libstdc++-32bit libva-intel-driver libusb libxkbcommon libxkbcommon-tools libxkbcommon-x11 MangoHud mesa mesa-dri-32bit mesa-nouveau-dri mesa-vaapi mesa-vdpau mesa-vulkan-intel mesa-vulkan-lavapipe nv-codec-headers pipewire pulseaudio SDL2 Vulkan-Tools vulkan-loader wget wireplumber xf86-video-nouveau"
 for pkg in $packages; do xbps-install "$pkg" --sync --update --yes ; done
 #Finally Install steam
 xbps-install steam --sync --update --yes
 xbps-remove --clean-cache --remove-orphans --recursive --verbose
'
#ENV
"${FIMG_BASE}" fim-exec mkdir -p "/home/steam"
"${FIMG_BASE}" fim-env add 'USER=steam' 'HOME=/home/steam' 'XDG_CONFIG_HOME=/home/steam/.config' 'XDG_DATA_HOME=/home/steam/.local/share'
"${FIMG_BASE}" fim-env list
"${FIMG_BASE}" fim-boot "/usr/sbin/steam"
#Create
"${FIMG_BASE}" fim-commit



##nix on alpine
pushd "$(mktemp -d)" >/dev/null 2>&1
docker stop "alpine-nix" 2>/dev/null ; docker rm "alpine-nix" 2>/dev/null
docker run --name "alpine-nix" --pull="always" "alpine:edge" sh -c '
apk update --no-interactive
#DO NOT USE --update | --latest, it breaks
apk add nix --no-interactive
apk info nix -L
nix-channel --add "https://nixos.org/channels/nixos-unstable" "nixpkgs"
nix-channel --list && nix-channel --update
nix derivation show "nixpkgs#hello" --extra-experimental-features flakes --extra-experimental-features nix-command
chmod 755 "/bin/bbsuid"
rm -rfv "/var/cache/apk/"* 2>/dev/null
rm -rfv "/usr/share/fonts/"* 2>/dev/null
rm -rfv "/usr/share/licenses/"* 2>/dev/null
rm -rfv "/usr/share/locale/"* 2>/dev/null
rm -rfv "/usr/share/man/"* 2>/dev/null
nix-collect-garbage ; apk cache clean
'
docker export "$(docker ps -aqf 'name=alpine-nix')" --output "rootfs.tar"
mkdir -p "./root" ; bsdtar -x -f "rootfs.tar" -C "./root"

proot --kill-on-exit -R "./root" /bin/sh -c 'nix-shell -p librewolf --run "librewolf"'


apk update --no-interactive
apk add nix --force --latest --upgrade --no-interactive

  apk add bash coreutils curl shadow sudo tar xz --force --latest --upgrade --no-interactiv

sh <(curl -qfsSL "https://nixos.org/nix/install") --no-daemon



curl -qfsSL "https://install.determinate.systems/nix" | bash -s -- install linux --init none --extra-conf "filter-syscalls = false" --no-confirm
#Source
source "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
#Fix perms: could not set permissions on '/nix/var/nix/profiles/per-user' to 755: Operation not permitted
#sudo chown --recursive "${USER}" "/nix"
sudo chown --recursive "root" "/nix"
echo "root    ALL=(ALL:ALL) ALL" | sudo tee -a "/etc/sudoers"